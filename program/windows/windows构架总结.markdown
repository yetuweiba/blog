#Window构架总结

这篇文章主要是对windows构架学习的总结，主要目的还是知其所以然，为以后的学习打打基础。

windows是一种操作系统，在开始对windows总结前，需要先简单说下操作系统：

>操作系统属于软件的范畴，同时也需要紧密地和硬件打交道，它为上层应用软件或应用系统提供了一层抽象，负责硬件资源的管理和分配。这样应用软件就可以不用同硬件打交道。

以上的段落是选自《windows内核原理与实现》(潘爱民)的2.1章节。

其实由上面的描述，在结合写程序的经历，可以认为操作系统很重要的一个作用是提供了一个**与硬件无关抽象**，这样上层开发人员可以不用考虑具体硬件的差别，就可以节省大量的精力。

**提供与硬件无关抽象**只是操作系统作用的一个方面，现代的操作系统都支持多任务，这就意味着需要提供**多任务的运行环境**，如何保证多个进程都可以正常运行，而且互不影响(这点很关键，如果不对进程间进行隔离，那么一个任务出错的话，就影响到其他的任务，这是不可接受的)

下面是现代操作系统的基本结构示意图，结合示图，可以更好地理解操作系统的作用。
//TODO::图片

由上图可知，对应的应用通过操作系统提供的系统服务来进行硬件的操作，例如打字，看电影，应用是不需要同硬件直接打交道的，这样可以节省大量的精力，而与硬件打交道的脏活累活由操作系统来做。同时，多个任务在“同时进行”中，操作系统需要保证对应的资源分配，让多个任务正常运行。

以上的两点是我理解的操作系统的两个重要作用，关于windows构架学习的总结，也会围绕这两点来开始。下面就开始进行windows相关构架的总结。

下图是windows系统结构图，
//TODO::windows系统结构图的图片

我们来看下这个windows系统结构图：

我们可以看到windows是分为**用户**和**系统**这两种模式，顾名思义，这两种模式之间的主要区别是对系统数据访问权限的不同，系统模式有更高的权限，采取这种做法的一个原因是保护操作系统，避免应用程序错误影响到操作系统本身。操作系统核心运行在内核模式下，应用程序的代码运行在用户模式中下。当应用程序使需要使用系统内核或内核拓展模块(内核驱动程序)所提供的服务事，应用程序会通过硬件指令从用户模式切换到内核模式中，当系统内核完成了所请求的服务后，重新切换到用户模式下。（//TODO::需要验证）所以，有时候多线程程序不一定高效，是因为线程切换，管理等需要切换模式的操作会占用很多cpu周期。（去参照软件调试）


现在我们可以把windows系统结构图和前面的操作系统结构图对应起来，用户模式上的用户模式进程可以对应应用程序，下面我们来简单说下用户模式进程的分类。

由图可知，用户模式进程可以分为**系统支持进程**、 **服务进程**、 **用户应用程序**、 **环境子系统**四种基本类型：

* 固定的**系统支持进程**(system support process), 比如登录进程和会话管理器(session manager)。
* **服务进程**(service process)纳宿windows的服务, 例如，任务管理器。windows服务一般独立于用户登录而运行。
* **用户应用程序**(user application),顾名思义，用户写的程序，例如QQ，迅雷等等。
* **环境子系统服务器进程**，实现了操作系统环境的支持部分，这里的环境主要指的是操作系统展示给用户或程序员的个性化部分。例如，在windows NT最新发布的时候带有三个不同的环境子系统：windows，POSIX和OS/2。最近windows10对linux相关的支持，也应该是添加了对应的环境子系统支持。

在这里还要注意**子系统DLL**，这里的子系统DLL主要是“ntdll.dll”,应用系统调用系统服务的时候，是通过此动态链接库转发调用到对应的系统服务。

下面是内核模式的组成部分：
* **windows执行体**，它包含了基本的操作系统服务，比如：内存管理、进程和线程管理、安全性、I/O、网络和跨进程通信。
* **windows内核**，这是由一组低层次的操作系统功能组成，比如线程调度，中断和异常分发以及多处理器的同步，它也提供了一组例程和基本对象，执行体的奇遇部分利用这些例程和对象来实现更高层次的功能。
* **设备驱动程序(device driver)**既包括硬件设备驱动程序，也包括文件系统和网络驱动程序之类的非硬件设备驱动程序。启动硬件驱动程序将用户的I/O函数调用转换成特定的硬件I/O请求。
* **硬件抽象层**(HAL, Hardware Abstraction Layer)指一层特殊的代码，用来将内核，设备驱动程序和windows执行体的其余部分，与平台相关的硬件差异隔离开来，这样，当下面硬件变换的时候，不会影响上层的程序。
* **窗口和图形系统(windowing and graphic system)**实现了图形用户界面(GUI)功能，比如对窗口的处理，用户界面控件，以及绘制等。

看完以上后，可能会对windows执行体和windows内核的感到疑惑，这两者的区别是什么呢，他们的区别主要是windows内核来实现操作系统的基本机制，而所有策略决定则留给执行体。执行体中的对象绝大多数封装了一个或多个内核对象，并且通过某种方式（例如句柄）来暴露给应用程序。这种设计体现了**机制与策略分离**的思想。这也是我们设计接口是需要考虑的一个部分，例如，接口尽量来提供基础的功能，具体的变化由这些基本的功能来组成，这样，接口就不用疲于应付各种新的需求了。





