#windows的进程和线程1--基本的概念

这篇文章用来对window下的进程和线程的基本概念来做总结，文章的形式是采用问答式，这样可以更有目的性。

**1.进程和线程分别是什么？**

说道这个问题，我们需要首先说下操作系统，操作系统将硬件管理起来，提供统一管理接口供用户调用。操作系统提供一个平台，进程则在平台上完成相应的操作(比如听音乐，看电影，编辑word文档等等)。在现代的操作系统中，操作系统支持多进程，即现代操作系统支持多个进程*同时*运行。进程提供了运行的环境，具体的逻辑任务由线程来完成。

我们来系统总结下：***进程提供一个各种资源的容器，定义了一个地址空间作为基本的执行环境；线程是一个指令执行序列，可以直接访问进程中的资源。每个进程中至少有一个线程，线程在任一时刻必属于某个进程。***


**2.前面说现代操作系统支持多个进程同时运行，那么是如何实现同时运行呢？**

这里的同时运行，需要区分CPU多核和单核的情况。

在单核的情况下，因为只有一个CPU，所以只能是在某一个时候只有一个进程在运行，操作系统采用了“分时”的办法。

首先，我们可以将进程想象为一长串**顺序**的指令流，当指令流执行完毕后，进程就退出来了，那么我们可以将这一串指令流来切开，即将这一长串指令流切为一片一片的指令片，只要CPU按照顺序执行这些指令片，也能得到和一直执行进程的结果。

当有多个进程的时候，我们将每个进程都切为对应的片，每隔一定时间来执行某个进程的片，之后在切换到另一个进程的片，这样就达到了“同时运行”的效果。只要时间片是很短暂的，小于人的感知时间(大约100ms到200ms)，就可以让人感觉不到进程在切换。

多核的情况和单核的情况相似，也是采用“分时”的方法。只不过是多核有多个处理器。这里可以把每个核想象为一个个单核就可以了。

到这里，大家就知道了如何达到多进程并行的效果，那么这**需要操作系统提供什么呢？**

很显然，操作系统要想完成分时的效果，需要做如下的事情：

1. 维护一个全局的进程表，记录当前哪些进程正在被执行。
2. 将时间分为适当的片段。
3. 在进程间实施切换，即保存上一个进程的执行环境信息，恢复下一个进程的执行环境。


**3.进程在操作系统中是怎么来的和怎么没的呢？**

在操作系统启动的时候，需要先把进程的运行环境全部创建起来，为进程的运行打好基础。创建一个进程即为进程建立基本的执行环境，然后将其加入到系统的全局进程表中，这样进程就能获得相应的资源来运行。

而进程的退出则是通知操作系统将其由全局进程表中去除，之后销毁此进程所有的资源。一般，系统会有检测的功能，当发现某个进程不正常的时候，操作系统可以将这个进程*杀掉*,从而释放对应的资源。

**4.既然进程就能达到并行的目的，那么为什么还需要线程呢？**

总地说来，是因为线程比进程成本更低。因为创建一个进程需要为其分配各种资源，而线程只需要使用进程事先分配好的即可；进程之间的通信成本也会较高，而线程则是在一个进程的环境下，通信起来会很方便。其实，我们可以把线程看做是一个“轻量级”的进程。

**5.线程的创建和切换是什么样子的？**

线程的创建其实和进程类似，也是建立起来线程的执行环境，比如分配线程所需要的数据结构和调用栈，完成这些数据结构的初始化操作。虽然这些操作比较于进程是很轻量级的，但是频繁创建和销毁也会是不可忽视的消耗。所以当需要频繁创建和销毁线程的时候，可以考虑线程池式的方式来解决消耗过大的问题。

进程中的多个线程执行的时候，是乱序的，即在某个时刻执行哪个线程，是不确定的，所以多线程的问题会比较难以调试。对于线程来说，是有用户态和内核态的区别，当进行线程切换的时候，如果线程是用户态，是需要切换为内核态的，这种切换也是需要耗费资源，不过目前随着硬件的发展，这部分切换的成本正在减少，所以，这部分的开销是可以接受的，大部分情况下，我们可以忽略线程的切换。

**6.线程的调度算法**

在这里我们先需要来了解下如何评价算法。调度算法的准则大约有如下的方面：

1. 公平性，在选择下一个运行的线程时，要考虑同等地位的线程必须有相同的机会来获取处理器执行权。
2. CPU有效利用，即只要有进程和线程在等待，CPU就不能空闲。

对于不同类型的操作系统会对算法有不同的需求，例如：实时操作系统对于响应时间有最低的要求，

调度算法可以分为非抢占式和抢占式，在非抢占式系统中，一个线程一旦被选择在处理器上执行，就一直运行，直到阻塞或自愿放弃或退出。我们可以看到，这类算法如果一个线程陷入长时间的处理中时，系统就无法切换其它的线程，容易造成其它线程的饿死。而抢占式系统中，一个线程被选中后，允许运行的时间长度有最大的限制，当到达这个时间后，就被迫放弃执行权，由系统来决定下一个执行的线程。

这里介绍三种典型的线程调度算法，限于篇幅，这里只给出简单的介绍，具体了解则需要去寻找对应的资料。

1. 先到先服务算法：这是在非抢占系统中的算法，顾名思义，即谁先来先执行谁。
2. 时间片轮换算法：将处理器时间分为最大长度不超过某个时间的片段，然后用轮转的方式来分配给线程。
3. 优先级调度算法：将线程分为不同的优先级，之后按照优先级来调度算法。

**7.windows线程采用了何种调度算法呢**

windows的调度算法是 抢占式，支持多处理器的优先级调度算法，即结合了前面几种算法的优缺点的一种算法。windows为每个处理器定义了一个链表数组，相同优先级的线程在同一链表中。当线程满足执行条件的时候，它首先被挂到当前处理器的一个待分配的链表(延迟的就绪链表)，然后调度器在适当的时候(当调度器获取控制权)把待分配表上的线程分配到到某个处理器对应优先级的线程链表中。当处理器选择下一个运行的线程时，会根据优先级来选择线程。


以上就是windows进程和线程的简单总结了。如果有描述错误或不清楚的地方，请指正。

参考资料：
《Windows内核原理与实现》--潘爱民








