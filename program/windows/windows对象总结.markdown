#windows对象总结

这篇文章是对windows对象的总结，在winows编程中，windows对象，句柄是一个基本概念，理解这些概念有助于后面的windows编程学习。文章的形式还是以解答问题的方式来组织。

注:在文中，对象对应的英语翻译是object,句柄对应的英语翻译是handle.

###**1. 在windows中，什么是对象？**

欲解释内核对象，需要先解释windows下对象(object)和句柄的概念。在windows中，对象其实指的是一个通用的结构，这个数据结构代表的一个系统资源，例如一个文件资源，线程资源等等。当我们操作的时候，只能通过句柄来操作这个对象代表的资源，无论你是文件还是线程。这个时候会有一个问题:
*windows为什么要将对象统一起来，只能通过句柄来操作对象代表的资源？*
大约有以下几点原因：

>*统一使用句柄，可以理解为封装，这意味着用户不需要关心对象的具体细节。这样就可以在系统升级的时候对用户的程序没有影响。

> *更好地利用windows安全策略，每个对象都有独立的访问控制列表(ACL),这样就可以限定访问对象的行为。例如我们想要读取某个文件，但是当前用户没有权限，那么就会返回一个空的句柄。

###**2.windows对象都有哪些呢？**
在windows编程中，我们每时每刻都在和windows对象打交道，例如进程，线程，文件等等。其实微软对windows对象做了分类：用户对象，内核对象，GDI(这是图像驱动接口，在这里不讨论这个)。
*用户对象*
>主要用来窗口相关的管理，例如Cursor，Hook，Window，这些都是用户对象

*内核对象*
>用来进行更底层的系统资源管理，例如内存，进程通信等等。

更详细的信息请点击[链接(msdn)](https://msdn.microsoft.com/en-us/library/windows/desktop/ms724515(v=vs.85).aspx).

在这里，需要简单说下用户对象和内核对象一个重要的区别：
>每个用户对象只能有一个句柄;而每个内核对象却可以有多个句柄，例如:Mutex是内核对象，用于多进程的同步，在某处创建，返回句柄，也可以在其它的进程打开(这其实也依赖此内核对象的安全属性设置)。

###**3 .内核对象共享的方式有哪些，系统是如何知道什么时候该销毁此对象呢？**
在此需要说明下，内核对象共享指的是跨进程共享内核对象。

先说第二个问题，当我们不需要使用内核对象的时候，直接调用CloseHandle即可，在系统内部维护着此内核对象的信息，当使用此内核对象的进程为0时，系统会销毁此对象。

接下来就是内核对象的共享方式了，首先要了解，为什么要共享内核对象？原因很简单：在很多场景下都需要使用共享内核对象的方式，例如使用文件映射对象可以在不同进程之间共享数据。

在windows中，有三种方法可以用来共享内核对象：
**a. 继承**
>在创建内核对象时，需要使用默认的安全性来创建，同时要将SECURITY_ATTRIBUTES中的bInhertHandle置为true。这样在创建子进程的时候，将创建的参数--bInheritHandles设置为true，这样就可以子进程就可以访问父进程相应的内核对象了。

**b. 为对象命名<br>**
>首先a进程创建一个内核对象，并对其命名为A,如果b进程想访问A，那么可以创建一个相同的内核对象，将其命名为A，如果b对象有足够的权限，那么新创建的内核对象将指向A，b进程就可以访问A了。

**c. 使用DuplicateHandle方法<br>**

>A进程调用此方法，将B进程中的内核对象共享到C进程中。

以上就是对Windows对象的总结。
